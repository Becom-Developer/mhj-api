#!/usr/bin/env perl
use FindBin;
use lib ( "$FindBin::RealBin/../lib", "$FindBin::RealBin/../local/lib/perl5" );
use Mojolicious::Lite -signatures;
use Mhj;
any '/' => sub ($c) {
    my $apikey = 'becom';
    my $mhj    = Mhj->new;
    my $origin = $c->req->headers->origin;
    my $opt    = $c->req->json;
    if ($origin) {
        $c->res->headers->header( 'Access-Control-Allow-Origin' => $origin );
        $c->res->headers->header(
            'Access-Control-Allow-Headers' => 'content-type,X-Requested-With' );
        $c->res->headers->header(
            'Access-Control-Allow-Methods' => 'GET,POST,OPTIONS' );
        $c->res->headers->header(
            'Access-Control-Allow-Credentials' => 'true' );
    }

    # $c->app->log->debug( $c->app->dumper( $c->res->headers ) );
    # Validate
    if ( !$opt->{path} || !$opt->{method} || !$opt->{apikey} ) {
        my $msg = $mhj->error->commit(
            "Unknown option specification: path, method, apikey");
        $c->render( json => $msg );
        return;
    }
    if ( $apikey ne $opt->{apikey} ) {
        my $msg = $mhj->error->commit("apikey is incorrect: $opt->{apikey}");
        $c->render( json => $msg );
        return;
    }

    # Routing
    if ( $opt->{path} eq 'build' ) {
        my $hash = $mhj->build->run($opt);
        $c->app->log->debug( $c->app->dumper($hash) );
        $c->render( json => $hash );
        return;
    }
    if ( $opt->{path} eq 'user' ) {
        my $hash = $mhj->user->run($opt);
        $c->app->log->debug( $c->app->dumper($hash) );
        $c->render( json => $hash );
        return;
    }
    if ( $opt->{path} eq 'period' ) {
        my $hash = $mhj->period->run($opt);
        $c->app->log->debug( $c->app->dumper($hash) );
        $c->render( json => $hash );
        return;
    }
    if ( $opt->{path} eq 'periodtype' ) {
        my $hash = $mhj->periodtype->run($opt);
        $c->app->log->debug( $c->app->dumper($hash) );
        $c->render( json => $hash );
        return;
    }
    if ( $opt->{path} eq 'chronology' ) {
        my $hash = $mhj->chronology->run($opt);
        $c->app->log->debug( $c->app->dumper($hash) );
        $c->render( json => $hash );
        return;
    }
    if ( $opt->{path} eq 'historydetails' ) {
        my $hash = $mhj->historydetails->run($opt);
        $c->app->log->debug( $c->app->dumper($hash) );
        $c->render( json => $hash );
        return;
    }
    my $msg = $mhj->error->commit("The resource is specified incorrectly");
    $c->render( json => $msg );
    return;
};

app->start;
